<svg id="ea249576-18d5-4863-8b95-96a43074f05e" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1400 462.64"><rect x="17.63" y="13" width="1370.35" height="137.03" rx="13.7" style="fill:#34495e;stroke:#f39c12;stroke-width:3px"/><text transform="translate(391.24 47.26)" style="isolation:isolate;font-size:22.839115142822266px;fill:#f39c12;font-family:Arial-BoldMT, Arial;font-weight:700">The Critical <tspan x="130.72" y="0" style="letter-spacing:-0.0551796292618659em">T</tspan><tspan x="143.41" y="0" style="letter-spacing:-0.000021379166703551296em">rade-off: Code Organization vs Performance</tspan></text><g style="isolation:isolate"><text transform="translate(40.47 81.51)" style="isolation:isolate;font-size:18.271291732788086px;fill:#e74c3c;font-family:Arial-BoldMT, Arial;font-weight:700">Separated<tspan x="88.35" y="0" style="letter-spacing:-0.037092855005089555em"> </tspan><tspan x="92.75" y="0">Activations:</tspan></text><text transform="translate(237.79 81.51)" style="font-size:18.271291732788086px;fill:#fff;font-family:ArialMT, Arial"><tspan xml:space="preserve"> Looks clean, follows OO</tspan><tspan x="202.09" y="0" style="letter-spacing:-0.018092120200609244em">P</tspan><tspan x="213.95" y="0" xml:space="preserve" style="letter-spacing:0.000026723958937384405em"> principles, easy to understand</tspan></text></g><g style="isolation:isolate"><text transform="translate(40.47 104.35)" style="isolation:isolate;font-size:18.271291732788086px;fill:#2ed573;font-family:Arial-BoldMT, Arial;font-weight:700">Unified Memory:</text><text transform="translate(183.61 104.35)" style="font-size:18.271291732788086px;fill:#fff;font-family:ArialMT, Arial"> <tspan x="5.08" y="0" style="letter-spacing:-0.01806539624167186em">V</tspan><tspan x="16.93" y="0">iolates &quot;clean code&quot; but delivers HPC-level performance</tspan></text></g><text transform="translate(460.64 132.9)" style="isolation:isolate;font-size:18.271291732788086px;fill:#f39c12;font-family:Arial-BoldMT, Arial;font-weight:700">In HPC inference: Performance trumps code aesthetics!</text><text transform="translate(616.96 188.41)" style="isolation:isolate;font-size:21.44890785217285px;fill:#fff;font-family:Arial-BoldMT, Arial;font-weight:700">Why Separation Kills Performance</text><rect x="17.63" y="212.25" width="655.38" height="238.32" rx="9.53" style="fill:#2c3e50;stroke:#e74c3c;stroke-width:2px"/><text transform="translate(29.55 242.04)" style="isolation:isolate;font-size:19.06569480895996px;fill:#e74c3c;font-family:Arial-BoldMT, Arial;font-weight:700">The Cache Miss Cascade:</text><text transform="translate(41.46 271.83)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">1. CPU loads weight from memory</text><text transform="translate(41.46 295.66)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">2. Cache line filled with weights (64 bytes)</text><text transform="translate(41.46 319.49)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">3. CPU needs activation from di<tspan x="234.59" y="0" style="letter-spacing:-0.018059033484076812em">f</tspan><tspan x="238.92" y="0" style="letter-spacing:0.00002926909802929791em">ferent location</tspan></text><text transform="translate(41.46 343.32)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">4. Cache miss! Evict weight data, load activations</text><text transform="translate(41.46 367.15)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">5. Need next weight? Cache miss again!</text><text transform="translate(41.46 396.95)" style="isolation:isolate;font-size:16.682483673095703px;fill:#ff4757;font-family:Arial-BoldMT, Arial;font-weight:700">Result: Thrashing between memory regions</text><text transform="translate(41.46 420.78)" style="isolation:isolate;font-size:16.682483673095703px;fill:#ff4757;font-family:Arial-BoldMT, Arial;font-weight:700">Memory controller can&apos;t predict access pattern</text><rect x="732.6" y="212.25" width="655.38" height="238.32" rx="9.53" style="fill:#2c3e50;stroke:#2ed573;stroke-width:2px"/><text transform="translate(744.51 242.04)" style="isolation:isolate;font-size:19.06569480895996px;fill:#2ed573;font-family:Arial-BoldMT, Arial;font-weight:700">The Sequential Solution:</text><text transform="translate(756.43 271.83)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">1. CPU loads weight from unified memory</text><text transform="translate(756.43 295.66)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">2. Cache line includes weight + next activation</text><text transform="translate(756.43 319.49)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">3. Next data access hits cache (already loaded!)</text><text transform="translate(756.43 343.32)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">4. Prefetcher predicts pattern, loads ahead</text><text transform="translate(756.43 367.15)" style="isolation:isolate;font-size:16.682483673095703px;fill:#fff;font-family:ArialMT, Arial">5. Every access hits cache or prefetch bu<tspan x="305.07" y="0" style="letter-spacing:-0.018088302582106107em">f</tspan><tspan x="309.4" y="0">fer</tspan></text><text transform="translate(756.43 396.95)" style="isolation:isolate;font-size:16.682483673095703px;fill:#26de81;font-family:Arial-BoldMT, Arial;font-weight:700">Result: Perfect cache utilization</text><text transform="translate(756.43 420.78)" style="isolation:isolate;font-size:16.682483673095703px;fill:#26de81;font-family:Arial-BoldMT, Arial;font-weight:700">Memory controller optimizes burst access</text></svg>