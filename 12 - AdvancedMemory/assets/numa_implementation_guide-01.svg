<svg id="a249721d-6cbb-4869-9fb3-099d5724b21b" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1400 515"><text transform="translate(442.56 30)" style="isolation:isolate;font-size:22px;fill:#4caf50;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">NUMA Implementation: Surprisingly Easy!</text><text transform="translate(483.96 55)" style="isolation:isolate;font-size:18px;fill:#ffc107;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">30-50 lines of C once you know the steps</text><rect x="50" y="80" width="650" height="140" rx="8" style="fill:#2c2c54;stroke:#2196f3;stroke-width:2px"/><text transform="translate(70 105)" style="isolation:isolate;font-size:16px;fill:#2196f3;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">1<tspan x="9.6" y="0" style="font-family:MyriadPro-Regular, Myriad Pro;font-weight:400">️⃣</tspan><tspan x="17.6" y="0" xml:space="preserve"> Detect NUMA Topology</tspan></text><text transform="translate(70 125)" style="isolation:isolate;font-size:12px;fill:#fff;font-family:CourierNewPSMT, Courier New">Ask the kernel how many nodes exist and which CPUs belong to each</text><rect x="80" y="135" width="600" height="70" rx="4" style="fill:#1a1a2e;stroke:#40407a"/><text transform="translate(90 150)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">#include &lt;numa.h&gt;</text><text transform="translate(90 165)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">numa_available();</text><text transform="translate(90 180)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">int N = numa_max_node() + 1; // e.g. 4 nodes</text><text transform="translate(90 195)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">numa_node_to_cpus(0, cpus); // fills CPU bitmap</text><rect x="720" y="80" width="630" height="140" rx="8" style="fill:#2c2c54;stroke:#4caf50;stroke-width:2px"/><text transform="translate(740 105)" style="isolation:isolate;font-size:16px;fill:#2196f3;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">2<tspan x="9.6" y="0" style="font-family:MyriadPro-Regular, Myriad Pro;font-weight:400">️⃣</tspan><tspan x="17.6" y="0" xml:space="preserve"> Allocate/Bind Memory per Node</tspan></text><text transform="translate(740 125)" style="isolation:isolate;font-size:12px;fill:#fff;font-family:CourierNewPSMT, Courier New">Either numa_alloc_onnode() OR mmap() + mbind() sub-ranges</text><rect x="750" y="135" width="570" height="70" rx="4" style="fill:#1a1a2e;stroke:#40407a"/><text transform="translate(760 150)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">void *base = mmap(NULL, bytes, PROT_READ|PROT_WRITE,</text><text transform="translate(760 165)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">MAP_PRIVATE|MAP_ANONYMOUS|MAP_HUGETLB, -1, 0);</text><text transform="translate(760 180)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">for (int n=0; n&lt;N; ++n) {</text><text transform="translate(760 195)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">mbind(base+n*slice, slice, MPOL_BIND, &amp;mask, 64, 0);</text><polygon points="706 144 722 150 706 156 706 144" style="fill:#4caf50"/><rect x="50" y="240" width="650" height="140" rx="8" style="fill:#2c2c54;stroke:#ff9800;stroke-width:2px"/><text transform="translate(70 265)" style="isolation:isolate;font-size:16px;fill:#2196f3;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">3<tspan x="9.6" y="0" style="font-family:MyriadPro-Regular, Myriad Pro;font-weight:400">️⃣</tspan><tspan x="17.6" y="0" xml:space="preserve"> Launch Worker Threads</tspan></text><text transform="translate(70 285)" style="isolation:isolate;font-size:12px;fill:#fff;font-family:CourierNewPSMT, Courier New">Pin each thread to cores in the same NUMA node</text><rect x="80" y="295" width="600" height="70" rx="4" style="fill:#1a1a2e;stroke:#40407a"/><text transform="translate(90 310)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">void *worker(void *arg) {</text><text transform="translate(90 325)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">int cpu = *(int*)arg; // first CPU in node</text><text transform="translate(90 340)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">cpu_set_t s; CPU_ZERO(&amp;s); CPU_SET(cpu, &amp;s);</text><text transform="translate(90 355)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">pthread_setaffinity_np(pthread_self(), sizeof(s), &amp;s);</text><rect x="720" y="240" width="630" height="140" rx="8" style="fill:#2c2c54;stroke:#9c27b0;stroke-width:2px"/><text transform="translate(740 265)" style="isolation:isolate;font-size:16px;fill:#2196f3;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">4<tspan x="9.6" y="0" style="font-family:MyriadPro-Regular, Myriad Pro;font-weight:400">️⃣</tspan><tspan x="17.6" y="0" xml:space="preserve"> Assign Token/Head Ranges</tspan></text><text transform="translate(740 285)" style="isolation:isolate;font-size:12px;fill:#fff;font-family:CourierNewPSMT, Courier New">Pure bookkeeping - no syscalls involved</text><rect x="750" y="295" width="570" height="70" rx="4" style="fill:#1a1a2e;stroke:#40407a"/><text transform="translate(760 310)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">args[n].base = base + n * slice;</text><text transform="translate(760 325)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">args[n].tok0 = n * T / N; // token start</text><text transform="translate(760 340)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">args[n].ntok = T / N; // token count</text><text transform="translate(760 355)" style="isolation:isolate;font-size:10px;fill:#e8f5e8;font-family:CourierNewPSMT, Courier New">args[n].head_start = n * H / N; // attention heads</text><polygon points="381 226 375 242 369 226 381 226" style="fill:#4caf50"/><polygon points="706 304 722 310 706 316 706 304" style="fill:#4caf50"/><rect x="400" y="400" width="600" height="100" rx="8" style="fill:#2c2c54;stroke:#ffc107;stroke-width:2px"/><text transform="translate(420 425)" style="isolation:isolate;font-size:16px;fill:#2196f3;font-family:CourierNewPS-BoldMT, Courier New;font-weight:700">5<tspan x="9.6" y="0" style="font-family:MyriadPro-Regular, Myriad Pro;font-weight:400">️⃣</tspan><tspan x="17.6" y="0" xml:space="preserve"> Optional: Intel CAT (Cache Allocation)</tspan></text><text transform="translate(420 445)" style="isolation:isolate;font-size:12px;fill:#fff;font-family:CourierNewPSMT, Courier New">Carve LLC ways per NUMA node class</text><rect x="430" y="455" width="540" height="35" rx="4" style="fill:#1a1a2e;stroke:#40407a"/><text transform="translate(440 470)" style="isolation:isolate;font-size:11px;fill:#ffe082;font-family:CourierNewPSMT, Courier New">pqos -e &apos;llc:1=0x0fff&apos; # give 4 cache ways to node-0</text><text transform="translate(440 485)" style="isolation:isolate;font-size:11px;fill:#ffe082;font-family:CourierNewPSMT, Courier New">pqos -a &apos;core:1=0-7&apos; # bind cores 0-7 to class 1</text><polygon points="706 386 700 402 694 386 706 386" style="fill:#4caf50"/></svg>