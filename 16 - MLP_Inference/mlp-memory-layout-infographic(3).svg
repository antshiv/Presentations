<svg viewBox="0 0 1920 1080" xmlns="http://www.w3.org/2000/svg">
  <!-- Background gradient -->
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#0a0e27;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1a1f3a;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="memGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#00ff88;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#00ccff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#0099ff;stop-opacity:1" />
    </linearGradient>

    <linearGradient id="cacheGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#ff6b6b;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#ffd93d;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#6bcf7f;stop-opacity:1" />
    </linearGradient>

    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>

    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
      <rect width="40" height="40" fill="none" stroke="#ffffff" stroke-width="0.1" opacity="0.1"/>
    </pattern>
  </defs>

  <!-- Main background -->
  <rect width="1920" height="1080" fill="url(#bgGradient)"/>
  <rect width="1920" height="1080" fill="url(#grid)"/>

  <!-- Title Section -->
  <text x="960" y="60" font-family="Arial, sans-serif" font-size="42" font-weight="bold" text-anchor="middle" fill="white">
    MLP Memory Layout: Bump Allocation Strategy
  </text>
  <text x="960" y="95" font-family="Arial, sans-serif" font-size="20" text-anchor="middle" fill="#00ff88">
    ANTSHIV ROBOTICS - Hardware-Aware Memory Design for Numerical Parity
  </text>

  <!-- MLP Memory Layout Visualization -->
  <g transform="translate(100, 150)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      MLP Memory Layout in Contiguous Arena
    </text>
    
    <!-- Memory Arena Visualization -->
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="1400" height="200" rx="10" fill="#0a1420" stroke="#00ff88" stroke-width="2"/>
      <text x="700" y="-10" font-family="monospace" font-size="14" text-anchor="middle" fill="#00ff88">
        Single Contiguous Memory Arena (mmap with 2MB Huge Pages)
      </text>
      
      <!-- FC1 Weight -->
      <rect x="10" y="20" width="320" height="60" fill="#ff6b6b" opacity="0.8" rx="3"/>
      <text x="170" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="white">fc1_weight</text>
      <text x="170" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="white">[4D × D]</text>
      <text x="170" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#ffdddd">4×128×128 floats</text>
      <text x="170" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#ffaaaa">64KB aligned</text>
      
      <!-- FC1 Bias -->
      <rect x="335" y="20" width="80" height="60" fill="#ffd93d" opacity="0.8" rx="3"/>
      <text x="375" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="black">fc1_bias</text>
      <text x="375" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="black">[4D]</text>
      <text x="375" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#aa8800">512 floats</text>
      <text x="375" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#886600">2KB</text>
      
      <!-- FC1 Output (Intermediate) -->
      <rect x="420" y="20" width="240" height="60" fill="#6bcf7f" opacity="0.8" rx="3"/>
      <text x="540" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="black">fc1_output</text>
      <text x="540" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="black">[T × 4D]</text>
      <text x="540" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#226622">128×512 floats</text>
      <text x="540" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#115511">256KB (GELU in-place)</text>
      
      <!-- FC2 Weight -->
      <rect x="665" y="20" width="320" height="60" fill="#00ccff" opacity="0.8" rx="3"/>
      <text x="825" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="white">fc2_weight</text>
      <text x="825" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="white">[4D × D]</text>
      <text x="825" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#aaeeff">4×128×128 floats</text>
      <text x="825" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#88ccff">64KB aligned</text>
      
      <!-- FC2 Bias -->
      <rect x="990" y="20" width="60" height="60" fill="#ff66ff" opacity="0.8" rx="3"/>
      <text x="1020" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="white">fc2_b</text>
      <text x="1020" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="white">[D]</text>
      <text x="1020" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#ffaaff">128 fl</text>
      <text x="1020" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#ff88ff">512B</text>
      
      <!-- MLP Output -->
      <rect x="1055" y="20" width="160" height="60" fill="#88ff88" opacity="0.8" rx="3"/>
      <text x="1135" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="black">mlp_output</text>
      <text x="1135" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="black">[T × D]</text>
      <text x="1135" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#448844">128×128 floats</text>
      <text x="1135" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#226622">64KB</text>
      
      <!-- Residual2 Output -->
      <rect x="1220" y="20" width="160" height="60" fill="#ffaa00" opacity="0.8" rx="3"/>
      <text x="1300" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="white">residual2</text>
      <text x="1300" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="white">[T × D]</text>
      <text x="1300" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="#ffeeaa">128×128 floats</text>
      <text x="1300" y="78" font-family="monospace" font-size="8" text-anchor="middle" fill="#ffcc88">64KB</text>
      
      <!-- Cache Line Markers -->
      <g opacity="0.5">
        <line x1="10" y1="90" x2="10" y2="160" stroke="#00ff88" stroke-width="1" stroke-dasharray="2,2"/>
        <line x1="74" y1="90" x2="74" y2="160" stroke="#00ff88" stroke-width="1" stroke-dasharray="2,2"/>
        <line x1="138" y1="90" x2="138" y2="160" stroke="#00ff88" stroke-width="1" stroke-dasharray="2,2"/>
        <line x1="202" y1="90" x2="202" y2="160" stroke="#00ff88" stroke-width="1" stroke-dasharray="2,2"/>
        <text x="42" y="155" font-family="monospace" font-size="9" text-anchor="middle" fill="#00ff88">64B</text>
        <text x="106" y="155" font-family="monospace" font-size="9" text-anchor="middle" fill="#00ff88">64B</text>
        <text x="170" y="155" font-family="monospace" font-size="9" text-anchor="middle" fill="#00ff88">64B</text>
      </g>
      
      <!-- Memory calculations -->
      <text x="10" y="185" font-family="monospace" font-size="11" fill="#00ff88">Total MLP memory per layer: ~704KB (aligned)</text>
      <text x="400" y="185" font-family="monospace" font-size="11" fill="#ffd93d">All offsets 64-byte aligned</text>
      <text x="700" y="185" font-family="monospace" font-size="11" fill="#6bcf7f">Sequential access pattern</text>
      <text x="1000" y="185" font-family="monospace" font-size="11" fill="#00ccff">Hardware prefetch optimal</text>
    </g>
  </g>

  <!-- Bump Allocator Implementation -->
  <g transform="translate(100, 400)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      Bump Allocator: Simple & Predictable
    </text>
    
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="650" height="220" rx="10" fill="#1a2332" stroke="#00ff88" stroke-width="2"/>
      <text x="325" y="25" font-family="monospace" font-size="14" text-anchor="middle" fill="#00ff88">Core Allocation Logic</text>
      
      <!-- Bump function -->
      <text x="20" y="50" font-family="monospace" font-size="11" fill="#888">// Bump allocator: increment offset with alignment</text>
      <text x="20" y="70" font-family="monospace" font-size="11" fill="#00ccff">static inline</text>
      <text x="120" y="70" font-family="monospace" font-size="11" fill="white">size_t bump(size_t *off, size_t count, size_t alignB) {</text>
      <text x="40" y="90" font-family="monospace" font-size="11" fill="white">*off = align_up(*off, alignB / </text>
      <text x="280" y="90" font-family="monospace" font-size="11" fill="#00ccff">sizeof</text>
      <text x="330" y="90" font-family="monospace" font-size="11" fill="white">(</text>
      <text x="340" y="90" font-family="monospace" font-size="11" fill="#00ccff">float</text>
      <text x="380" y="90" font-family="monospace" font-size="11" fill="white">));</text>
      <text x="40" y="110" font-family="monospace" font-size="11" fill="white">size_t here = *off;</text>
      <text x="40" y="130" font-family="monospace" font-size="11" fill="white">*off += count;</text>
      <text x="40" y="150" font-family="monospace" font-size="11" fill="#00ccff">return</text>
      <text x="90" y="150" font-family="monospace" font-size="11" fill="white">here;</text>
      <text x="20" y="170" font-family="monospace" font-size="11" fill="white">}</text>
      
      <text x="20" y="200" font-family="monospace" font-size="12" fill="#6bcf7f">✓ O(1) allocation</text>
      <text x="180" y="200" font-family="monospace" font-size="12" fill="#6bcf7f">✓ Zero fragmentation</text>
      <text x="380" y="200" font-family="monospace" font-size="12" fill="#6bcf7f">✓ Cache-line aligned</text>
    </g>
    
    <!-- MLP Allocation Sequence -->
    <g transform="translate(700, 40)">
      <rect x="0" y="0" width="600" height="220" rx="10" fill="#1a2332" stroke="#ffd93d" stroke-width="2"/>
      <text x="300" y="25" font-family="monospace" font-size="14" text-anchor="middle" fill="#ffd93d">MLP Allocation Sequence</text>
      
      <text x="20" y="50" font-family="monospace" font-size="10" fill="#888">// Allocate MLP tensors in order, all aligned</text>
      <text x="20" y="70" font-family="monospace" font-size="10" fill="white">L->fc1_weight_offset = bump(&amp;off,</text>
      <text x="40" y="85" font-family="monospace" font-size="10" fill="#ff6b6b">4ULL * aligned_embed_dim * aligned_embed_dim</text>
      <text x="350" y="85" font-family="monospace" font-size="10" fill="white">, CACHE_ALIGN);</text>
      
      <text x="20" y="105" font-family="monospace" font-size="10" fill="white">L->fc1_bias_offset = bump(&amp;off,</text>
      <text x="40" y="120" font-family="monospace" font-size="10" fill="#ffd93d">4ULL * aligned_embed_dim</text>
      <text x="200" y="120" font-family="monospace" font-size="10" fill="white">, CACHE_ALIGN);</text>
      
      <text x="20" y="140" font-family="monospace" font-size="10" fill="white">L->fc1_output_offset = bump(&amp;off,</text>
      <text x="40" y="155" font-family="monospace" font-size="10" fill="#6bcf7f">4ULL * context_window * aligned_embed_dim</text>
      <text x="330" y="155" font-family="monospace" font-size="10" fill="white">, CACHE_ALIGN);</text>
      
      <text x="20" y="175" font-family="monospace" font-size="10" fill="#888">// Continue for FC2 weights, bias, outputs...</text>
      
      <text x="20" y="200" font-family="monospace" font-size="11" fill="#00ff88">Result: Predictable offsets, perfect stride</text>
    </g>
  </g>

  <!-- Hardware Benefits -->
  <g transform="translate(100, 660)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      Hardware-Aware Design Benefits
    </text>
    
    <!-- Cache Efficiency -->
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="400" height="160" rx="10" fill="#1a2332" stroke="#00ff88" stroke-width="2"/>
      <text x="200" y="25" font-family="monospace" font-size="14" text-anchor="middle" fill="#00ff88">Cache Line Efficiency</text>
      
      <text x="20" y="50" font-family="monospace" font-size="12" fill="white">64-byte aligned benefits:</text>
      <text x="30" y="75" font-family="monospace" font-size="11" fill="#6bcf7f">• One cache line = 16 floats exactly</text>
      <text x="30" y="95" font-family="monospace" font-size="11" fill="#6bcf7f">• No split cache line loads</text>
      <text x="30" y="115" font-family="monospace" font-size="11" fill="#6bcf7f">• Optimal SIMD alignment (AVX-512)</text>
      <text x="30" y="135" font-family="monospace" font-size="11" fill="#6bcf7f">• Hardware prefetcher friendly</text>
      <text x="30" y="155" font-family="monospace" font-size="11" fill="#6bcf7f">• Reduced TLB pressure</text>
    </g>
    
    <!-- Memory Access Pattern -->
    <g transform="translate(420, 40)">
      <rect x="0" y="0" width="400" height="160" rx="10" fill="#1a2332" stroke="#ffd93d" stroke-width="2"/>
      <text x="200" y="25" font-family="monospace" font-size="14" text-anchor="middle" fill="#ffd93d">Access Pattern Benefits</text>
      
      <text x="20" y="50" font-family="monospace" font-size="12" fill="white">Sequential access advantages:</text>
      <text x="30" y="75" font-family="monospace" font-size="11" fill="#ffd93d">• Predictable stride between layers</text>
      <text x="30" y="95" font-family="monospace" font-size="11" fill="#ffd93d">• Spatial locality maximized</text>
      <text x="30" y="115" font-family="monospace" font-size="11" fill="#ffd93d">• Prefetch distance consistent</text>
      <text x="30" y="135" font-family="monospace" font-size="11" fill="#ffd93d">• Memory bandwidth saturated</text>
      <text x="30" y="155" font-family="monospace" font-size="11" fill="#ffd93d">• NUMA-friendly layout</text>
    </g>
    
    <!-- Huge Pages -->
    <g transform="translate(840, 40)">
      <rect x="0" y="0" width="400" height="160" rx="10" fill="#1a2332" stroke="#00ccff" stroke-width="2"/>
      <text x="200" y="25" font-family="monospace" font-size="14" text-anchor="middle" fill="#00ccff">2MB Huge Pages</text>
      
      <text x="20" y="50" font-family="monospace" font-size="12" fill="white">Huge page advantages:</text>
      <text x="30" y="75" font-family="monospace" font-size="11" fill="#00ccff">• 512x fewer TLB entries needed</text>
      <text x="30" y="95" font-family="monospace" font-size="11" fill="#00ccff">• Single TLB miss per 2MB</text>
      <text x="30" y="115" font-family="monospace" font-size="11" fill="#00ccff">• Reduced page table walks</text>
      <text x="30" y="135" font-family="monospace" font-size="11" fill="#00ccff">• Better for large models</text>
      <text x="30" y="155" font-family="monospace" font-size="11" fill="#00ccff">• OS overhead minimized</text>
    </g>
  </g>

  <!-- Token Parallel Execution -->
  <g transform="translate(1300, 400)">
    <rect x="0" y="0" width="520" height="420" rx="10" fill="#2a3f5f" stroke="#00ff88" stroke-width="2"/>
    <text x="260" y="30" font-family="monospace" font-size="16" text-anchor="middle" fill="#00ff88">Token-Parallel MLP Memory Access</text>
    
    <!-- Visual representation of token slicing -->
    <g transform="translate(20, 50)">
      <rect x="0" y="0" width="480" height="80" rx="5" fill="#1a2332" stroke="#00ff88" stroke-width="1"/>
      <text x="240" y="-5" font-family="monospace" font-size="12" text-anchor="middle" fill="#00ff88">
        FC1 Output Buffer [T=128 × 4D=512]
      </text>
      
      <!-- Core 0 slice -->
      <rect x="5" y="10" width="115" height="60" fill="#ff6b6b" opacity="0.7" rx="3"/>
      <text x="62" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="white">Core 0</text>
      <text x="62" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="white">T[0:32]</text>
      <text x="62" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="white">64KB</text>
      
      <!-- Core 1 slice -->
      <rect x="125" y="10" width="115" height="60" fill="#ffd93d" opacity="0.7" rx="3"/>
      <text x="182" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="black">Core 1</text>
      <text x="182" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="black">T[32:64]</text>
      <text x="182" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="black">64KB</text>
      
      <!-- Core 2 slice -->
      <rect x="245" y="10" width="115" height="60" fill="#6bcf7f" opacity="0.7" rx="3"/>
      <text x="302" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="black">Core 2</text>
      <text x="302" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="black">T[64:96]</text>
      <text x="302" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="black">64KB</text>
      
      <!-- Core 3 slice -->
      <rect x="365" y="10" width="110" height="60" fill="#00ccff" opacity="0.7" rx="3"/>
      <text x="420" y="35" font-family="monospace" font-size="11" text-anchor="middle" fill="white">Core 3</text>
      <text x="420" y="50" font-family="monospace" font-size="10" text-anchor="middle" fill="white">T[96:128]</text>
      <text x="420" y="65" font-family="monospace" font-size="9" text-anchor="middle" fill="white">64KB</text>
    </g>
    
    <text x="20" y="150" font-family="monospace" font-size="11" fill="#888">// Each core works on contiguous memory</text>
    <text x="20" y="170" font-family="monospace" font-size="10" fill="#00ccff">float</text>
    <text x="60" y="170" font-family="monospace" font-size="10" fill="white">*A = memory_base + input_offset +</text>
    <text x="70" y="185" font-family="monospace" font-size="10" fill="#ffd93d">token_start * aligned_embed_dim;</text>
    
    <text x="20" y="205" font-family="monospace" font-size="10" fill="#00ccff">float</text>
    <text x="60" y="205" font-family="monospace" font-size="10" fill="white">*C = memory_base + fc1_output_offset +</text>
    <text x="70" y="220" font-family="monospace" font-size="10" fill="#ffd93d">token_start * 4 * aligned_embed_dim;</text>
    
    <text x="20" y="245" font-family="monospace" font-size="11" fill="#888">// GEMM on local slice (no sync needed)</text>
    <text x="20" y="260" font-family="monospace" font-size="10" fill="#6bcf7f">gemm_blocked_serial</text>
    <text x="140" y="260" font-family="monospace" font-size="10" fill="white">(A, B_weights, bias, C,</text>
    <text x="40" y="275" font-family="monospace" font-size="10" fill="white">num_tokens, 4*D, D);</text>
    
    <text x="20" y="300" font-family="monospace" font-size="11" fill="#888">// GELU activation in-place</text>
    <text x="20" y="315" font-family="monospace" font-size="10" fill="#ffd93d">gelu_activation_token_parallel</text>
    <text x="190" y="315" font-family="monospace" font-size="10" fill="white">(M, fc1_output);</text>
    
    <text x="20" y="340" font-family="monospace" font-size="11" fill="#888">// FC2 follows same pattern</text>
    
    <rect x="20" y="360" width="480" height="1" fill="#00ff88" opacity="0.3"/>
    
    <text x="260" y="385" font-family="monospace" font-size="11" text-anchor="middle" fill="#00ff88">Key Benefits:</text>
    <text x="20" y="405" font-family="monospace" font-size="10" fill="white">✓ No false sharing  ✓ Perfect locality  ✓ Zero sync overhead</text>
  </g>

  <!-- Summary Box -->
  <g transform="translate(100, 860)">
    <rect x="0" y="0" width="1700" height="140" rx="10" fill="#0a1420" stroke="#00ff88" stroke-width="2"/>
    <text x="850" y="30" font-family="monospace" font-size="18" text-anchor="middle" fill="#00ff88">Design Principles for Numerical Parity</text>
    
    <g transform="translate(50, 50)">
      <text x="0" y="0" font-family="monospace" font-size="13" fill="#ffd93d">Memory Efficiency:</text>
      <text x="10" y="20" font-family="monospace" font-size="11" fill="white">• Single allocation</text>
      <text x="10" y="40" font-family="monospace" font-size="11" fill="white">• ~704KB per layer</text>
      <text x="10" y="60" font-family="monospace" font-size="11" fill="white">• Zero fragmentation</text>
    </g>
    
    <g transform="translate(350, 50)">
      <text x="0" y="0" font-family="monospace" font-size="13" fill="#ffd93d">Hardware Alignment:</text>
      <text x="10" y="20" font-family="monospace" font-size="11" fill="white">• 64-byte boundaries</text>
      <text x="10" y="40" font-family="monospace" font-size="11" fill="white">• AVX-512 optimal</text>
      <text x="10" y="60" font-family="monospace" font-size="11" fill="white">• Cache line perfect</text>
    </g>
    
    <g transform="translate(650, 50)">
      <text x="0" y="0" font-family="monospace" font-size="13" fill="#ffd93d">Access Pattern:</text>
      <text x="10" y="20" font-family="monospace" font-size="11" fill="white">• Sequential access</text>
      <text x="10" y="40" font-family="monospace" font-size="11" fill="white">• Predictable stride</text>
      <text x="10" y="60" font-family="monospace" font-size="11" fill="white">• Prefetch friendly</text>
    </g>
    
    <g transform="translate(950, 50)">
      <text x="0" y="0" font-family="monospace" font-size="13" fill="#ffd93d">Parallelization:</text>
      <text x="10" y="20" font-family="monospace" font-size="11" fill="white">• Token-level parallel</text>
      <text x="10" y="40" font-family="monospace" font-size="11" fill="white">• No synchronization</text>
      <text x="10" y="60" font-family="monospace" font-size="11" fill="white">• Perfect scaling</text>
    </g>
    
    <g transform="translate(1250, 50)">
      <text x="0" y="0" font-family="monospace" font-size="13" fill="#ffd93d">Numerical Goal:</text>
      <text x="10" y="20" font-family="monospace" font-size="11" fill="white">• Bit-exact with PyTorch</text>
      <text x="10" y="40" font-family="monospace" font-size="11" fill="white">• Deterministic results</text>
      <text x="10" y="60" font-family="monospace" font-size="11" fill="white">• FP32 precision maintained</text>
    </g>
  </g>

  <!-- Footer -->
  <text x="960" y="1040" font-family="monospace" font-size="14" text-anchor="middle" fill="#888">
    ANTSHIV ROBOTICS | CPU LLM Series | Hardware-Aware Memory Design
  </text>
  <text x="960" y="1060" font-family="monospace" font-size="12" text-anchor="middle" fill="#666">
    github.com/antshiv | Bump Allocation: Simple, Fast, Predictable
  </text>
</svg>