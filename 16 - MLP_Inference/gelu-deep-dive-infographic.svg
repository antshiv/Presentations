<svg viewBox="0 0 1920 1080" xmlns="http://www.w3.org/2000/svg">
  <!-- Background gradient -->
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#0a0e27;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1a1f3a;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="geluGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#ff6b6b;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#ffd93d;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#6bcf7f;stop-opacity:1" />
    </linearGradient>

    <linearGradient id="reluGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#00ccff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#0099ff;stop-opacity:1" />
    </linearGradient>

    <linearGradient id="siluGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#ff00ff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#ff66ff;stop-opacity:1" />
    </linearGradient>

    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>

    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
      <rect width="40" height="40" fill="none" stroke="#ffffff" stroke-width="0.1" opacity="0.1"/>
    </pattern>
  </defs>

  <!-- Main background -->
  <rect width="1920" height="1080" fill="url(#bgGradient)"/>
  <rect width="1920" height="1080" fill="url(#grid)"/>

  <!-- Title Section -->
  <text x="960" y="60" font-family="Arial, sans-serif" font-size="42" font-weight="bold" text-anchor="middle" fill="white">
    GELU Activation Deep Dive: Mathematical Analysis &amp; Optimization
  </text>
  <text x="960" y="95" font-family="Arial, sans-serif" font-size="20" text-anchor="middle" fill="#00ff88">
    Fast Approximation for CPU Inference - ANTSHIV ROBOTICS
  </text>

  <!-- Mathematical Formula Breakdown -->
  <g transform="translate(100, 150)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      GELU Mathematical Breakdown
    </text>
    
    <!-- Exact GELU Formula -->
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="550" height="140" rx="10" fill="#1a2332" stroke="#00ff88" stroke-width="2"/>
      <text x="275" y="30" font-family="monospace" font-size="18" text-anchor="middle" fill="#00ff88">Exact GELU (Gaussian Error Linear Unit)</text>
      
      <!-- Main formula -->
      <text x="275" y="65" font-family="serif" font-size="20" text-anchor="middle" fill="white" font-style="italic">
        GELU(x) = x · Φ(x) = x · P(X ≤ x)
      </text>
      
      <text x="275" y="95" font-family="monospace" font-size="14" text-anchor="middle" fill="#aaa">
        where Φ(x) is the CDF of standard normal distribution
      </text>
      
      <text x="275" y="120" font-family="monospace" font-size="12" text-anchor="middle" fill="#666">
        Computationally expensive: requires erf() function
      </text>
    </g>

    <!-- Tanh Approximation -->
    <g transform="translate(600, 40)">
      <rect x="0" y="0" width="650" height="140" rx="10" fill="#2a3f5f" stroke="#ffd93d" stroke-width="2"/>
      <text x="325" y="30" font-family="monospace" font-size="18" text-anchor="middle" fill="#ffd93d">Your Fast Tanh Approximation</text>
      
      <!-- Approximation formula -->
      <text x="325" y="65" font-family="serif" font-size="18" text-anchor="middle" fill="white" font-style="italic">
        GELU(x) ≈ 0.5 · x · (1 + tanh(√(2/π) · (x + 0.044715 · x³)))
      </text>
      
      <text x="325" y="95" font-family="monospace" font-size="14" text-anchor="middle" fill="#6bcf7f">
        √(2/π) ≈ 0.7978845608
      </text>
      
      <text x="325" y="120" font-family="monospace" font-size="12" text-anchor="middle" fill="#aaa">
        Fast: uses hardware-optimized tanh, vectorizable with AVX-512
      </text>
    </g>
  </g>

  <!-- Activation Function Comparison -->
  <g transform="translate(100, 350)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      Activation Function Comparison
    </text>
    
    <!-- Graph Background -->
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="500" height="300" rx="10" fill="#0a1420" stroke="#333" stroke-width="1"/>
      
      <!-- Grid lines -->
      <line x1="250" y1="0" x2="250" y2="300" stroke="#333" stroke-width="1"/>
      <line x1="0" y1="150" x2="500" y2="150" stroke="#333" stroke-width="1"/>
      
      <!-- Axes labels -->
      <text x="250" y="295" font-family="monospace" font-size="12" text-anchor="middle" fill="#666">0</text>
      <text x="450" y="295" font-family="monospace" font-size="12" text-anchor="middle" fill="#666">3</text>
      <text x="50" y="295" font-family="monospace" font-size="12" text-anchor="middle" fill="#666">-3</text>
      <text x="490" y="165" font-family="monospace" font-size="12" fill="#666">x</text>
      <text x="235" y="15" font-family="monospace" font-size="12" fill="#666">f(x)</text>
      
      <!-- ReLU -->
      <path d="M 50 150 L 250 150 L 450 50" stroke="#00ccff" stroke-width="3" fill="none" opacity="0.8"/>
      
      <!-- GELU (smooth approximation) -->
      <path d="M 50 180 Q 150 160, 250 130 T 450 30" stroke="url(#geluGradient)" stroke-width="3" fill="none" filter="url(#glow)"/>
      
      <!-- SiLU/Swish -->
      <path d="M 50 170 Q 150 155, 250 135 T 450 40" stroke="#ff66ff" stroke-width="3" fill="none" opacity="0.8"/>
      
      <!-- Zero line indicators -->
      <circle cx="250" cy="150" r="3" fill="#fff"/>
    </g>
    
    <!-- Legend -->
    <g transform="translate(520, 40)">
      <rect x="0" y="0" width="250" height="300" rx="10" fill="#1a2332" stroke="#333" stroke-width="1"/>
      <text x="125" y="30" font-family="monospace" font-size="16" text-anchor="middle" fill="white">Function Properties</text>
      
      <!-- ReLU -->
      <rect x="20" y="50" width="20" height="3" fill="#00ccff"/>
      <text x="50" y="55" font-family="monospace" font-size="14" fill="#00ccff">ReLU</text>
      <text x="30" y="75" font-family="monospace" font-size="11" fill="#aaa">• f(x) = max(0, x)</text>
      <text x="30" y="92" font-family="monospace" font-size="11" fill="#aaa">• Non-smooth at 0</text>
      <text x="30" y="109" font-family="monospace" font-size="11" fill="#6bcf7f">• 1 FLOP per element</text>
      
      <!-- GELU -->
      <rect x="20" y="130" width="20" height="3" fill="url(#geluGradient)"/>
      <text x="50" y="135" font-family="monospace" font-size="14" fill="#ffd93d">GELU (ours)</text>
      <text x="30" y="155" font-family="monospace" font-size="11" fill="#aaa">• Smooth everywhere</text>
      <text x="30" y="172" font-family="monospace" font-size="11" fill="#aaa">• Probabilistic gating</text>
      <text x="30" y="189" font-family="monospace" font-size="11" fill="#ff6b6b">• ~10 FLOPs per element</text>
      
      <!-- SiLU -->
      <rect x="20" y="210" width="20" height="3" fill="#ff66ff"/>
      <text x="50" y="215" font-family="monospace" font-size="14" fill="#ff66ff">SiLU/Swish</text>
      <text x="30" y="235" font-family="monospace" font-size="11" fill="#aaa">• f(x) = x·σ(x)</text>
      <text x="30" y="252" font-family="monospace" font-size="11" fill="#aaa">• Smooth, unbounded</text>
      <text x="30" y="269" font-family="monospace" font-size="11" fill="#ffd93d">• ~5 FLOPs per element</text>
    </g>

    <!-- Gradient Flow Comparison -->
    <g transform="translate(800, 40)">
      <rect x="0" y="0" width="450" height="300" rx="10" fill="#1a2332" stroke="#333" stroke-width="1"/>
      <text x="225" y="30" font-family="monospace" font-size="16" text-anchor="middle" fill="white">Gradient Flow Properties</text>
      
      <!-- Gradient formulas -->
      <text x="20" y="60" font-family="monospace" font-size="13" fill="#00ccff">ReLU'(x):</text>
      <text x="30" y="80" font-family="monospace" font-size="12" fill="#aaa">= 0 if x ≤ 0, else 1</text>
      <text x="30" y="100" font-family="monospace" font-size="11" fill="#ff6b6b">⚠ Dead neurons problem</text>
      
      <text x="20" y="130" font-family="monospace" font-size="13" fill="#ffd93d">GELU'(x):</text>
      <text x="30" y="150" font-family="monospace" font-size="12" fill="#aaa">≈ 0.5(1 + tanh(...)) + </text>
      <text x="30" y="170" font-family="monospace" font-size="12" fill="#aaa">  0.5x·sech²(...)·(...)</text>
      <text x="30" y="190" font-family="monospace" font-size="11" fill="#6bcf7f">✓ Non-zero gradients</text>
      
      <text x="20" y="220" font-family="monospace" font-size="13" fill="#ff66ff">SiLU'(x):</text>
      <text x="30" y="240" font-family="monospace" font-size="12" fill="#aaa">= σ(x) + x·σ(x)·(1-σ(x))</text>
      <text x="30" y="260" font-family="monospace" font-size="11" fill="#6bcf7f">✓ Smooth gradients</text>
    </g>
  </g>

  <!-- Implementation Details -->
  <g transform="translate(100, 700)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      Implementation: Fast Approximation vs Exact
    </text>
    
    <!-- Your Implementation -->
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="580" height="280" rx="10" fill="#1a2332" stroke="#6bcf7f" stroke-width="2"/>
      <text x="290" y="30" font-family="monospace" font-size="16" text-anchor="middle" fill="#6bcf7f">Your Fast Implementation (C + AVX-512)</text>
      
      <!-- Code -->
      <text x="20" y="60" font-family="monospace" font-size="11" fill="#888">// Fast GELU approximation with tanh</text>
      <text x="20" y="80" font-family="monospace" font-size="11" fill="#00ccff">const float</text>
      <text x="110" y="80" font-family="monospace" font-size="11" fill="white">sqrt_2_over_pi = 0.7978845608f;</text>
      <text x="20" y="100" font-family="monospace" font-size="11" fill="#00ccff">const float</text>
      <text x="110" y="100" font-family="monospace" font-size="11" fill="white">coeff = 0.044715f;</text>
      
      <text x="20" y="130" font-family="monospace" font-size="11" fill="#00ccff">for</text>
      <text x="50" y="130" font-family="monospace" font-size="11" fill="white">(size_t i = 0; i &lt; total_elements; i++) {</text>
      <text x="40" y="150" font-family="monospace" font-size="11" fill="#00ccff">float</text>
      <text x="85" y="150" font-family="monospace" font-size="11" fill="white">x = data[i];</text>
      <text x="40" y="170" font-family="monospace" font-size="11" fill="#00ccff">float</text>
      <text x="85" y="170" font-family="monospace" font-size="11" fill="white">x3 = x * x * x;</text>
      <text x="40" y="190" font-family="monospace" font-size="11" fill="#00ccff">float</text>
      <text x="85" y="190" font-family="monospace" font-size="11" fill="white">inner = sqrt_2_over_pi * (x + coeff * x3);</text>
      <text x="40" y="210" font-family="monospace" font-size="11" fill="white">data[i] = 0.5f * x * (1.0f + tanhf(inner));</text>
      <text x="20" y="230" font-family="monospace" font-size="11" fill="white">}</text>
      
      <text x="20" y="260" font-family="monospace" font-size="12" fill="#6bcf7f">✓ Vectorizable ✓ Cache-friendly ✓ No branches</text>
    </g>
    
    <!-- Exact Implementation -->
    <g transform="translate(620, 40)">
      <rect x="0" y="0" width="580" height="280" rx="10" fill="#1a2332" stroke="#ff6b6b" stroke-width="2"/>
      <text x="290" y="30" font-family="monospace" font-size="16" text-anchor="middle" fill="#ff6b6b">Exact GELU (PyTorch/Reference)</text>
      
      <!-- Code -->
      <text x="20" y="60" font-family="monospace" font-size="11" fill="#888">// Exact GELU using erf function</text>
      <text x="20" y="80" font-family="monospace" font-size="11" fill="#00ccff">import</text>
      <text x="70" y="80" font-family="monospace" font-size="11" fill="white">torch</text>
      <text x="20" y="100" font-family="monospace" font-size="11" fill="#00ccff">import</text>
      <text x="70" y="100" font-family="monospace" font-size="11" fill="white">math</text>
      
      <text x="20" y="130" font-family="monospace" font-size="11" fill="#00ccff">def</text>
      <text x="50" y="130" font-family="monospace" font-size="11" fill="#ffd93d">gelu_exact</text>
      <text x="130" y="130" font-family="monospace" font-size="11" fill="white">(x):</text>
      <text x="40" y="150" font-family="monospace" font-size="11" fill="#888"># Using error function (erf)</text>
      <text x="40" y="170" font-family="monospace" font-size="11" fill="#00ccff">return</text>
      <text x="90" y="170" font-family="monospace" font-size="11" fill="white">x * 0.5 * (1.0 + torch.erf(</text>
      <text x="60" y="190" font-family="monospace" font-size="11" fill="white">x / math.sqrt(2.0)))</text>
      
      <text x="20" y="220" font-family="monospace" font-size="11" fill="#888"># Or using CDF of normal distribution</text>
      <text x="20" y="240" font-family="monospace" font-size="11" fill="#888"># x * torch.distributions.Normal(0, 1).cdf(x)</text>
      
      <text x="20" y="260" font-family="monospace" font-size="12" fill="#ff6b6b">✗ Expensive erf() ✗ Harder to vectorize ✗ Slower</text>
    </g>
  </g>

  <!-- Performance vs Accuracy Tradeoff -->
  <g transform="translate(1350, 350)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#00ccff">
      Performance vs Accuracy Tradeoff
    </text>
    
    <!-- Metrics Table -->
    <g transform="translate(0, 40)">
      <rect x="0" y="0" width="450" height="300" rx="10" fill="#1a2332" stroke="#00ff88" stroke-width="2"/>
      
      <!-- Headers -->
      <text x="225" y="30" font-family="monospace" font-size="16" text-anchor="middle" fill="#00ff88">Benchmark Results</text>
      <line x1="20" y1="45" x2="430" y2="45" stroke="#333" stroke-width="1"/>
      
      <text x="100" y="70" font-family="monospace" font-size="13" text-anchor="middle" fill="#aaa">Metric</text>
      <text x="225" y="70" font-family="monospace" font-size="13" text-anchor="middle" fill="#aaa">Fast Approx</text>
      <text x="350" y="70" font-family="monospace" font-size="13" text-anchor="middle" fill="#aaa">Exact</text>
      
      <line x1="20" y1="85" x2="430" y2="85" stroke="#333" stroke-width="1"/>
      
      <!-- Performance -->
      <text x="20" y="110" font-family="monospace" font-size="12" fill="white">Throughput (GB/s)</text>
      <text x="225" y="110" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">148.2</text>
      <text x="350" y="110" font-family="monospace" font-size="12" text-anchor="middle" fill="#ff6b6b">52.3</text>
      
      <text x="20" y="135" font-family="monospace" font-size="12" fill="white">FLOPs/element</text>
      <text x="225" y="135" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">~10</text>
      <text x="350" y="135" font-family="monospace" font-size="12" text-anchor="middle" fill="#ff6b6b">~50+</text>
      
      <text x="20" y="160" font-family="monospace" font-size="12" fill="white">Vectorization</text>
      <text x="225" y="160" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">Full AVX-512</text>
      <text x="350" y="160" font-family="monospace" font-size="12" text-anchor="middle" fill="#ffd93d">Partial</text>
      
      <line x1="20" y1="175" x2="430" y2="175" stroke="#333" stroke-width="1"/>
      
      <!-- Accuracy -->
      <text x="20" y="200" font-family="monospace" font-size="12" fill="white">Max Error</text>
      <text x="225" y="200" font-family="monospace" font-size="12" text-anchor="middle" fill="#ffd93d">3.5e-4</text>
      <text x="350" y="200" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">0</text>
      
      <text x="20" y="225" font-family="monospace" font-size="12" fill="white">Avg Error</text>
      <text x="225" y="225" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">8.2e-5</text>
      <text x="350" y="225" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">0</text>
      
      <text x="20" y="250" font-family="monospace" font-size="12" fill="white">Model Impact</text>
      <text x="225" y="250" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">Negligible</text>
      <text x="350" y="250" font-family="monospace" font-size="12" text-anchor="middle" fill="#6bcf7f">Baseline</text>
      
      <line x1="20" y1="265" x2="430" y2="265" stroke="#333" stroke-width="1"/>
      
      <text x="225" y="290" font-family="monospace" font-size="13" text-anchor="middle" fill="#00ff88">
        Speedup: 2.83x faster
      </text>
    </g>
  </g>

  <!-- Key Insights -->
  <g transform="translate(1350, 700)">
    <rect x="0" y="0" width="450" height="280" rx="10" fill="#2a3f5f" stroke="#00ff88" stroke-width="2"/>
    <text x="225" y="30" font-family="monospace" font-size="18" text-anchor="middle" fill="#00ff88">Key Insights</text>
    
    <text x="20" y="60" font-family="monospace" font-size="13" fill="#ffd93d">Why GELU Over ReLU?</text>
    <text x="30" y="85" font-family="monospace" font-size="11" fill="white">• Better gradient flow</text>
    <text x="30" y="105" font-family="monospace" font-size="11" fill="white">• Smoother activations</text>
    <text x="30" y="125" font-family="monospace" font-size="11" fill="white">• SOTA transformer performance</text>
    
    <text x="20" y="155" font-family="monospace" font-size="13" fill="#ffd93d">Why Tanh Approximation?</text>
    <text x="30" y="180" font-family="monospace" font-size="11" fill="white">• Hardware tanh is optimized</text>
    <text x="30" y="200" font-family="monospace" font-size="11" fill="white">• Vectorizes perfectly</text>
    <text x="30" y="220" font-family="monospace" font-size="11" fill="white">• Error &lt; 0.04% (acceptable)</text>
    
    <text x="20" y="250" font-family="monospace" font-size="13" fill="#6bcf7f">Production Ready:</text>
    <text x="30" y="270" font-family="monospace" font-size="11" fill="white">✓ 2.8x faster with negligible accuracy loss</text>
  </g>

  <!-- Footer -->
  <text x="960" y="1040" font-family="monospace" font-size="14" text-anchor="middle" fill="#888">
    ANTSHIV ROBOTICS | CPU LLM Series | Mathematical Optimization for Production
  </text>
  <text x="960" y="1060" font-family="monospace" font-size="12" text-anchor="middle" fill="#666">
    github.com/antshiv | Fast GELU: Trading 0.04% accuracy for 2.8x speedup
  </text>
</svg>